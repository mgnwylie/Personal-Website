type = "risk", #risk
name = "var"
opt_min_var <- optimize.portfolio(
# Minimize variance (risk) with ROI
min_var <- add.objective(
portfolio = my_folio,
type = "risk", #risk
name = "var"
opt_min_var <- optimize.portfolio(
# Minimize variance (risk) with ROI
min_var <- add.objective(
portfolio = my_folio,
type = "risk", #risk
name = "var"
)
opt_min_var <- optimize.portfolio(
R = returns,
portfolio = min_var,
optimize_method = "ROI",
trace = TRUE)
)
# Minimize variance (risk) with ROI
min_var <- add.objective(
portfolio = my_folio,
type = "risk", #risk
name = "var"
)
opt_min_var <- optimize.portfolio(
R = returns,
portfolio = min_var,
optimize_method = "ROI",
trace = TRUE))
# Minimize variance (risk) with ROI
min_var <- add.objective(
portfolio = my_folio,
type = "risk", #risk
name = "var"
)
opt_min_var <- optimize.portfolio(
R = returns,
portfolio = min_var,
optimize_method = "ROI",
trace = TRUE)
# I commented out the print function again to limit the lengthy results.
#print.default(opt_min_var)
#print(opt_min_var)
# Plot optimized minimum var (i.e. risk)
plot(
opt_min_var,
risk.col = "StdDev",
return.col = "mean",
main = "Minimum Variance Optimization",
chart.assets = TRUE,
xlim = c(-0.5, 1),
ylim = c(-0.002, 0.004)
)
meansd_ef <- create.EfficientFrontier(
R = returns,
portfolio = my_folio,
type = "mean-sd",
n.portfolios = 10,
)
# Plot efficient frontier
chart.EfficientFrontier(
meansd_ef,
match.col = "StdDev", # which column to use for risk
type = "l",
RAR.text = "Sharpe Ratio",
tangent.line = FALSE,
chart.assets = TRUE,
labels.assets = TRUE,
xlim = c(-0.5, 1),
ylim = c(-0.002, 0.004),
element.color = "blue"
)
meansd_ef <- create.EfficientFrontier(
R = returns,
portfolio = my_folio,
type = "mean-sd",
n.portfolios = 10,
)
# Plot efficient frontier
chart.EfficientFrontier(
meansd_ef,
match.col = "StdDev", # which column to use for risk
type = "l",
RAR.text = "Sharpe Ratio",
tangent.line = FALSE,
chart.assets = TRUE,
labels.assets = TRUE,
xlim = c(-0.5, 1),
ylim = c(-0.002, 0.004),
element.color = "blue"
)
knitr::opts_chunk$set(echo = F, message = F, warning = F)
library(PortfolioAnalytics)
library(PerformanceAnalytics)
library(quantmod)
library(zoo)
library(plotly)
library(tidyquant)
library(dplyr)
library(DEoptim)
library(ROI)
require(ROI.plugin.glpk)
require(ROI.plugin.quadprog)
library(xts)
# set parameters for the stock dates, as start and end.
getSymbolData <- function(symbolList, start = "2019-06-01", end = "2019-12-31"){
getSymbols(
symbolList,
auto.assign = TRUE,
from = start,
to = end,
)
p_data <- xts(
get(symbolList[1])[, 6]
)
for (i in 2:length(symbolList)){
p_data <- merge.xts(p_data, get(symbolList[i])[, 6])
}
colnames(p_data) <- symbolList
# calculate returns for price and returns data, rename columns
r_data <- na.omit(CalculateReturns(p_data))
colnames(r_data) <- symbolList
list(returns_data = r_data, price_data = p_data)
}
# Stocks for BNS, Air Canada, Shopify, goeasy
my_stocks <- getSymbolData(c("BNS.TO", "AC", "SHOP", "GSY"))
#This makes it a data frame of return data.
return_data <- as.data.frame(my_stocks$returns_data)
#This changes the name to BNS_TO from BNS.TO
names(return_data) <- c("BNS_TO", "AC", "SHOP", "GSY")
#Do the same for price data
#return_data$Date <- index(my_stocks$returns_data)
price_data <- as.data.frame(my_stocks$price_data)
names(price_data) <- c("BNS_TO", "AC", "SHOP", "GSY")
# Look at plot
plotly::plot_ly(
data = price_data,
y = ~ BNS_TO,
type = "scatter",
mode = "lines"
) %>% layout(
title = title,
xaxis = list(
type = "date"
),
yaxis = list(
title = "Price"
)
)
# Separate returns data, in xts format.
returns <- my_stocks$returns_data
# Separate price data, in xts format.
price <- my_stocks$price_data
# Calculate the average returns and risk (covariance matrix)
mean_returns <- colMeans(returns)
cov_matrix <- cov(returns)
# Create the portfolio
my_folio <- portfolio.spec(assets = colnames(returns))
# Add constraint
my_folio <- add.constraint(
portfolio = my_folio,
type = "box",
min = 0.05, #these are risk
max = 0.65
)
my_folio <- add.constraint(
portfolio = my_folio,
# The type means the type of investment
type = "leverage",
min_sum = 0.99,  #this is very risky
max_sum = 1.01
)
# Maximize the average returns with return on investment (ROI)
max_return <- add.objective(
portfolio = my_folio,
type = "return",
name = "mean"
)
# Optimization
opt_max_return <- optimize.portfolio(
R = returns,
portfolio = max_return,
optimize_method = "ROI",
trace = TRUE
)
# these print the details on how much I should invest.
#print.default(opt_max_return) #this prints a lot more than the other one.. (after)
#print(opt_max_return)
# Plot optimized maximum mean (i.e. return?)
plot(
opt_max_return,
risk.col = "StdDev",
return.col = "mean",
main = "Minimum Variance Optimization",
chart.assets = TRUE,
xlim = c(-0.5, 1),
ylim = c(-0.002, 0.004)
)
# Minimize variance (risk) with ROI
min_var <- add.objective(
portfolio = my_folio,
type = "risk", #risk
name = "var"
)
opt_min_var <- optimize.portfolio(
R = returns,
portfolio = min_var,
optimize_method = "ROI",
trace = TRUE)
# I commented out the print function again to limit the lengthy results.
#print.default(opt_min_var)
#print(opt_min_var)
# Plot optimized minimum var (i.e. risk)
plot(
opt_min_var,
risk.col = "StdDev",
return.col = "mean",
main = "Minimum Variance Optimization",
chart.assets = TRUE,
xlim = c(-0.5, 1),
ylim = c(-0.002, 0.004)
)
meansd_ef <- create.EfficientFrontier(
R = returns,
portfolio = my_folio,
type = "mean-sd",
n.portfolios = 10,
)
# Plot efficient frontier
chart.EfficientFrontier(
meansd_ef,
match.col = "StdDev", # which column to use for risk
type = "l",
RAR.text = "Sharpe Ratio",
tangent.line = FALSE,
chart.assets = TRUE,
labels.assets = TRUE,
xlim = c(-0.5, 1),
ylim = c(-0.002, 0.004),
element.color = "blue"
)
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
knitr::opts_chunk$set(echo = F, message = F, warning = F)
library(PortfolioAnalytics)
library(PerformanceAnalytics)
library(quantmod)
library(zoo)
library(plotly)
library(tidyquant)
library(dplyr)
library(DEoptim)
library(ROI)
require(ROI.plugin.glpk)
require(ROI.plugin.quadprog)
library(xts)
# Look at plot
plotly::plot_ly(
data = price_data,
y = ~ BNS_TO,
type = "scatter",
mode = "lines",
tickangle = 45
) %>% layout(
title = title,
xaxis = list(
type = "date"
),
yaxis = list(
title = "Price"
)
)
blogdown(serve_site)
blogdown::serve_site()
View(price_data)
knitr::opts_chunk$set(echo = TRUE)
#install.packages("dplyr")
#install.packages("repmis")
#install.packages("httr")
library(dplyr)
library(repmis)
library(httr)
#load data
births_2003_2006 <- readRDS("births_2003_2006.rds")
births_2007_2018 <- readRDS("births_2007_2018.rds")
names(births_2007_2018)
names(births_2003_2006)
births_2003_2018 <- bind_rows(births_2003_2006, births_2007_2018)
births_2003_2018 <- select(births_2003_2018, -c("Notes"))
births_no_na <- filter(births_2003_2018, !is.na(Average.LMP.Gestational.Age))
births_by_state <- group_by(births_no_na, State) %>%
mutate(mean_wt = mean(Average.Birth.Weight))
fer_rate_2010 <- filter(births_no_na, Year==2010)
rank_fer_rate <- group_by(fer_rate_2010, State) %>%
summarize(mean_wt = mean(Average.Birth.Weight))
#View(rank_fer_rate)
knitr::opts_chunk$set(echo = F, message = F, warning = F)
library(PortfolioAnalytics)
library(PerformanceAnalytics)
library(quantmod)
library(zoo)
library(plotly)
library(tidyquant)
library(dplyr)
library(DEoptim)
library(ROI)
require(ROI.plugin.glpk)
require(ROI.plugin.quadprog)
library(xts)
# Look at plot
plotly::plot_ly(
data = price_data,
y = ~ BNS_TO,
type = "scatter",
mode = "lines",
tickangle = 45 #attempting to format the x-axis.
) %>% layout(
title = title,
margin = list(b = 160)
xaxis = list(
# Look at plot
plotly::plot_ly(
data = price_data,
y = ~ BNS_TO,
type = "scatter",
mode = "lines",
tickangle = 45 #attempting to format the x-axis.
) %>% layout(
title = title,
margin = list(b = 160),
xaxis = list(
type = "date"
),
yaxis = list(
title = "Price"
)
)
# Look at plot
plotly::plot_ly(
data = price_data,
y = ~ BNS_TO,
type = "scatter",
mode = "lines",
tickangle = 45 #attempting to format the x-axis.
) %>% layout(
title = "title BNS Stock Price",
margin = list(b = 160),
xaxis = list(
type = "date"
),
yaxis = list(
title = "Price"
)
)
View(price_data)
View(my_stocks)
names(price_data) <- c("Date", "BNS_TO", "AC", "SHOP", "GSY")
my_stocks[["returns_data"]]
# add column name to first column
setNames(cbind(rownames(price_data), price_data, row.names = NULL),
c("Date", "BNS_TO", "AC", "SHOP", "GSY"))
# add column name to first column
price_data <- setNames(cbind(rownames(price_data), price_data, row.names = NULL),
c("Date", "BNS_TO", "AC", "SHOP", "GSY"))
# Look at plot
plotly::plot_ly(
data = price_data,
y = ~ BNS_TO,
x = ~ Date,
type = "scatter",
mode = "lines",
tickangle = 45 #attempting to format the x-axis.
) %>% layout(
title = "BNS Stock Price",
margin = list(b = 160), #changes x-axis labels
xaxis = list(
type = "date"
),
yaxis = list(
title = "Price"
)
)
blogdown::serve_site()
knitr::opts_chunk$set(echo = F, message = F, warning = F)
library(PortfolioAnalytics)
library(PerformanceAnalytics)
library(quantmod)
library(zoo)
library(plotly)
library(tidyquant)
library(dplyr)
library(DEoptim)
library(ROI)
require(ROI.plugin.glpk)
require(ROI.plugin.quadprog)
library(xts)
# Plot optimized maximum mean (i.e. return?)
plot(
opt_max_return,
risk.col = "StdDev",
return.col = "mean",
main = "Minimum Variance Optimization",
chart.assets = TRUE,
xlim = c(-0.5, 1),
ylim = c(-0.002, 0.004)
)
blogdown::serve_site()
# Plot optimized maximum mean (i.e. return?)
plot(
opt_max_return,
risk.col = "StdDev",
return.col = "mean",
main = "Minimum Variance Optimization",
chart.assets = TRUE,
xlim = c(-0.5, 1),
ylim = c(-0.004, 0.006)
)
# Plot optimized maximum mean (i.e. return?)
plot(
opt_max_return,
risk.col = "StdDev",
return.col = "mean",
main = "Low Risk Optimization",
#chart.assets = TRUE,
xlim = c(-0.5, 1),
ylim = c(-0.004, 0.006)
)
# Plot optimized maximum mean (i.e. return?)
plot(
opt_max_return,
risk.col = "StdDev",
return.col = "mean",
main = "Low Risk Optimization",
chart.assets = TRUE,
xlim = c(-0.5, 1),
ylim = c(-0.004, 0.006),
asp = 1
)
blogdown::serve_site(
)
# Plot optimized maximum mean (i.e. return?)
plot(
opt_max_return,
risk.col = "StdDev",
return.col = "mean",
main = "Low Risk Optimization",
chart.assets = TRUE,
xlim = c(-0.5, 1),
ylim = c(-0.004, 0.006),
xlab = "Standard Deviation or risk",
ylab = "Average returns",
asp = 2
)
# Plot optimized maximum mean (i.e. return?)
plot(
opt_max_return,
risk.col = "StdDev",
return.col = "mean",
main = "Low Risk Optimization",
chart.assets = TRUE,
xlim = c(-0.5, 1),
ylim = c(-0.004, 0.006),
xlab = "Standard Deviation or risk ",
ylab = "Average returns ",
asp = 2
)
# Plot optimized maximum mean (i.e. return?)
plot(
opt_max_return,
risk.col = "StdDev",
return.col = "mean",
main = "Low Risk Optimization",
chart.assets = TRUE,
xlim = c(-0.5, 1),
ylim = c(-0.004, 0.006),
title (xlab = "Standard Deviation or risk ",
ylab = "Average returns "),
asp = 2
)
blogdown::serve_site()
# Plot optimized maximum mean (i.e. return?)
plot(
opt_max_return,
risk.col = "StdDev",
return.col = "mean",
main = "Low Risk Optimization",
chart.assets = TRUE,
xlim = c(-0.5, 1),
ylim = c(-0.004, 0.006),
title (xlab = "Standard Deviation or risk ",
ylab = "Average returns "),
asp = 2
)
blogdown::serve_site()
blogdown::sserve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown:::preview_site(startup = TRUE)
blogdown:::new_post_addin()
blogdown:::preview_site(startup = TRUE)
blogdown:::preview_site(startup = TRUE)
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown:::preview_site(startup = TRUE)
blogdown:::preview_site(startup = TRUE)
