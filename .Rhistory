addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
setView(lat = 15 , lng = 0 , zoom = 2)
m
leaflet(options = leafletOptions(minZoom = 0, maxZoom = 18))
install.packages("maps")
library(maps)
mapStates = map("state", fill = TRUE, plot = FALSE)
leaflet(data = mapStates) %>%
addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
mapStates = map("canada", fill = TRUE, plot = FALSE)
mapStates = map("Canada", fill = TRUE, plot = FALSE)
help(package='maps')
mapStates = map("canada.cities", fill = TRUE, plot = FALSE)
mapStates = map("canada.cities", fill = TRUE, plot = FALSE)
mapStates = map(regions=sov.expand("Spain"), fill = TRUE, plot = FALSE)
leaflet(data = mapStates) %>%
addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
mapStates = map(regions=sov.expand("Canada"), fill = TRUE, plot = FALSE)
leaflet(data = mapStates) %>%
addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
leaflet(data = mapStates) %>%
addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
leaflet(data = mapStates) %>%
addTiles()
leaflet(data = mapStates) %>%
addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
leaflet(data = mapStates) %>%
addTiles() %>%
addPolygons(stroke = FALSE)
# this works, and makes a canada map - it's purple
leaflet(data = mapStates) %>%
addTiles() %>%
addPolygons(color = "#03F", stroke = FALSE)
# this works, and makes a canada map - it's purple
leaflet(data = mapStates) %>%
addTiles() %>%
addPolygons(color = "#bdd7e7", stroke = FALSE)
---
title: "Inequality Map"
author: "Megan Wylie"
date: '2019-10-02'
categories: ["R"]
tags: ["R Markdown", "plot", "regression"]
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
# Income inequality and health research
I wrote my Master's thesis on the topic of income inequality and health in Canadian cities. To show inequality throughout Canada, I mapped inequality levels for each Canadian city for three time periods: 2001, 2006, and 2011.
Here is a reproduction of that map, which now includes 2016.
# Map
```{r setup, fig.caption = 'Urban Inequality in Canada', include=FALSE}
#install packages
install.packages("geojsonio")
install.packages("sf")
install.packages("mapview")
install.packages("tidyverse")
#load the packages
library(tidyverse)
library(geojsonio)
library(sf)
library(mapview)
# Here I set up the Canada map from the map package
mapStates = map(regions=sov.expand("Canada"), fill = TRUE, plot = FALSE)
## Uploading Geojson file to R when file has NULL columns
#upload data
df <- geojsonio::geojson_read("data/data.geojson")
#isolate the important stuff
df<- df$features
#rename columns for later
new.names <- c(
"type" ,
names(df[[1]]$properties) ,
"geometry.type" ,
"lng" ,
"lat"
)
#Start creating datafram
point.locations <- df[[1]] %>% as.data.frame()
#Rename columns with your new names
names(point.locations) <- new.names
#Loop through every item in the geojson list
for (i in 2:length(df)) {
t <- df[[i]]$properties %>% unlist()
#Make sure the item doesn't have any null column values
if (length(t) == 12) {
out.file <- df[[i]] %>% as.data.frame()
names(out.file) <- new.names
point.locations <- dplyr::bind_rows(point.locations , out.file)
} else {
message(paste(t[["CMANAME"]] , "has NULL values."))
}
}
#Make data frame a spatial dataframe ("simple feature")
point.locations.sf <- st_as_sf(point.locations , coords = c("lng" , "lat") , crs = 3347)
#Put it on a map
mapview::mapview(point.locations.sf  , label = point.locations.sf$CMANAME)
#Put it on a map
mapview::mapview(point.locations.sf  , label = point.locations.sf$CMANAME)
#Put it on a map
mapview::mapview(point.locations.sf, label = point.locations.sf$CMANAME)
#Put it on a map
mapview::mapview(point.locations.sf, label = point.locations.sf$CMANAME)
library(tidyverse)
library(geojsonio)
library(sf)
library(mapview)
# Here I set up the Canada map from the map package
mapStates = map(regions=sov.expand("Canada"), fill = TRUE, plot = FALSE)
## Uploading Geojson file to R when file has NULL columns
#upload data
df <- geojsonio::geojson_read("data/data.geojson")
#isolate the important stuff
df<- df$features
#rename columns for later
new.names <- c(
"type" ,
names(df[[1]]$properties) ,
"geometry.type" ,
"lng" ,
"lat"
)
#Start creating datafram
point.locations <- df[[1]] %>% as.data.frame()
#Rename columns with your new names
names(point.locations) <- new.names
#Loop through every item in the geojson list
for (i in 2:length(df)) {
t <- df[[i]]$properties %>% unlist()
#Make sure the item doesn't have any null column values
if (length(t) == 12) {
out.file <- df[[i]] %>% as.data.frame()
names(out.file) <- new.names
point.locations <- dplyr::bind_rows(point.locations , out.file)
} else {
message(paste(t[["CMANAME"]] , "has NULL values."))
}
}
#Make data frame a spatial dataframe ("simple feature")
point.locations.sf <- st_as_sf(point.locations , coords = c("lng" , "lat") , crs = 3347)
#Put it on a map
mapview::mapview(point.locations.sf, label = point.locations.sf$CMANAME)
#Put it on a map
m <- mapview::mapview(point.locations.sf, label = point.locations.sf$CMANAME)
m
m
#Put it on a map
m <- mapview::mapview(point.locations.sf, label = point.locations.sf$CMANAME)
m
m
library(mapview)
m
#Put it on a map
m <- mapview::mapview(point.locations.sf, label = point.locations.sf$CMANAME)
m
point.locations.sf.transform <- sf::st_transform(point.locations.sf , 4326)
leaflet(point.locations.sf.transform) %>%
addProviderTiles(provider = providers$CartoDB.Positron) %>%
addCircleMarkers(radius = 6 ,
color = "#3182bd" ,
fillColor = "#9ecae1" ,
fillOpacity = .6 ,
weight = 2 ,
label = ~CMANAME)
library(leaflet)
leaflet(point.locations.sf.transform) %>%
addProviderTiles(provider = providers$CartoDB.Positron) %>%
addCircleMarkers(radius = 6 ,
color = "#3182bd" ,
fillColor = "#9ecae1" ,
fillOpacity = .6 ,
weight = 2 ,
label = ~CMANAME)
---
title: "Inequality Map"
author: "Megan Wylie"
date: '2019-10-02'
categories: ["R"]
tags: ["R Markdown", "plot", "regression"]
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
# Income inequality and health research
I wrote my Master's thesis on the topic of income inequality and health in Canadian cities. To show inequality throughout Canada, I mapped inequality levels for each Canadian city for three time periods: 2001, 2006, and 2011.
Here is a reproduction of that map, which now includes 2016.
# Map
```{r setup, fig.caption = 'Urban Inequality in Canada', include=FALSE}
#install packages
#install.packages("geojsonio")
#install.packages("sf")
#install.packages("mapview")
#install.packages("tidyverse")
#install.packages("shiny")
#load the packages
library(tidyverse)
library(geojsonio)
library(sf)
library(mapview)
library(leaflet)
library(shiny)
# Here I set up the Canada map from the map package
mapStates = map(regions=sov.expand("Canada"), fill = TRUE, plot = FALSE)
## Uploading Geojson file to R when file has NULL columns
#upload data
df <- geojsonio::geojson_read("data/data.geojson")
#isolate the important stuff
df<- df$features
#rename columns for later
new.names <- c(
"type" ,
names(df[[1]]$properties) ,
"geometry.type" ,
"lng" ,
"lat"
)
#Start creating datafram
point.locations <- df[[1]] %>% as.data.frame()
#Rename columns with your new names
names(point.locations) <- new.names
#Loop through every item in the geojson list
for (i in 2:length(df)) {
t <- df[[i]]$properties %>% unlist()
#Make sure the item doesn't have any null column values
if (length(t) == 12) {
out.file <- df[[i]] %>% as.data.frame()
names(out.file) <- new.names
point.locations <- dplyr::bind_rows(point.locations , out.file)
} else {
message(paste(t[["CMANAME"]] , "has NULL values."))
}
}
#Make data frame a spatial dataframe ("simple feature")
point.locations.sf <- st_as_sf(point.locations , coords = c("lng" , "lat") , crs = 3347)
#Put it on a map!
# Name cities
mapview::mapview(point.locations.sf, label = point.locations.sf$CMANAME)
point.locations.sf.transform <- sf::st_transform(point.locations.sf , 4326)
# map via leaflet
leaflet(point.locations.sf.transform) %>%
addProviderTiles(provider = providers$CartoDB.Positron) %>%
addCircleMarkers(radius = 5 ,
color = "#3182bd" ,
fillColor = "#9ecae1" ,
fillOpacity = .6 ,
weight = 2 ,
label = ~CMANAME)
# Put leaflet in Shiny app
# Define UI ----
ui <- fluidPage(
titlePanel("title panel"),
sidebarLayout(
sidebarPanel("sidebar panel"),
mainPanel("main panel")
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
```
# map via leaflet
leaflet(point.locations.sf.transform) %>%
#addProviderTiles(provider = providers$CartoDB.Positron) %>%
addCircleMarkers(radius = 5 ,
color = "#3182bd" ,
fillColor = "#9ecae1" ,
fillOpacity = .6 ,
weight = 2 ,
label = ~CMANAME)
# map via leaflet
leaflet(point.locations.sf.transform) %>%
addProviderTiles(provider = providers$CartoDB.Positron) %>%
addCircleMarkers(radius = 5 ,
color = "#3182bd" ,
fillColor = "#9ecae1" ,
fillOpacity = .6 ,
weight = 2 ,
label = ~CMANAME)
View(point.locations.sf.transform)
# map via leaflet
leaflet(point.locations.sf.transform) %>%
addProviderTiles(provider = providers$CartoDB.Positron) %>%
addCircleMarkers(radius = ~gini01 ,
color = "#3182bd" ,
fillColor = "#9ecae1" ,
fillOpacity = .6 ,
weight = 2 ,
label = ~CMANAME)
# map via leaflet
leaflet(point.locations.sf.transform) %>%
addProviderTiles(provider = providers$CartoDB.Positron) %>%
addCircleMarkers(radius = ~gini01 ,
color = "#3182bd" ,
fillColor = "#9ecae1" ,
fillOpacity = .6 ,
weight = 2 ,
label = ~CMANAME)
# map via leaflet
leaflet(point.locations.sf.transform) %>%
addProviderTiles(provider = providers$CartoDB.Positron) %>%
addCircleMarkers(radius = point.locations.sf.transform$gini01 ,
color = "#3182bd" ,
fillColor = "#9ecae1" ,
fillOpacity = .6 ,
weight = 2 ,
label = ~CMANAME)
mutate(df, gini01 = gini01*100)
mutate(df, gini011 = gini01*100)
df2 <- mutate(df, gini011 = gini01*100)
# map via leaflet
leaflet(point.locations.sf.transform) %>%
addProviderTiles(provider = providers$CartoDB.Positron) %>%
addCircleMarkers(radius = 100*(point.locations.sf.transform$gini01) ,
color = "#3182bd" ,
fillColor = "#9ecae1" ,
fillOpacity = .6 ,
weight = 2 ,
label = ~CMANAME)
# map via leaflet
leaflet(point.locations.sf.transform) %>%
addProviderTiles(provider = providers$CartoDB.Positron) %>%
addCircleMarkers(radius = 50*(point.locations.sf.transform$gini01) ,
color = "#3182bd" ,
fillColor = "#9ecae1" ,
fillOpacity = .6 ,
weight = 2 ,
label = ~CMANAME)
# map via leaflet
leaflet(point.locations.sf.transform) %>%
addProviderTiles(provider = providers$CartoDB.Positron) %>%
addCircleMarkers(radius = 2*(point.locations.sf.transform$gini01) ,
color = "#3182bd" ,
fillColor = "#9ecae1" ,
fillOpacity = .6 ,
weight = 2 ,
label = ~CMANAME)
# map via leaflet
leaflet(point.locations.sf.transform) %>%
addProviderTiles(provider = providers$CartoDB.Positron) %>%
addCircleMarkers(radius = 12*(point.locations.sf.transform$gini01) ,
color = "#3182bd" ,
fillColor = "#9ecae1" ,
fillOpacity = .6 ,
weight = 2 ,
label = ~CMANAME)
# map via leaflet
leaflet(point.locations.sf.transform) %>%
addProviderTiles(provider = providers$CartoDB.Positron) %>%
addCircleMarkers(radius = 20*(point.locations.sf.transform$gini01) ,
color = "#3182bd" ,
fillColor = "#9ecae1" ,
fillOpacity = .6 ,
weight = 2 ,
label = ~CMANAME)
# map via leaflet
leaflet(point.locations.sf.transform) %>%
addProviderTiles(provider = providers$CartoDB.Positron) %>%
addCircleMarkers(radius = ~ sqrt(point.locations.sf.transform$gini01) ,
color = "#3182bd" ,
fillColor = "#9ecae1" ,
fillOpacity = .6 ,
weight = 2 ,
label = ~CMANAME)
# map via leaflet
leaflet(point.locations.sf.transform) %>%
addProviderTiles(provider = providers$CartoDB.Positron) %>%
addCircleMarkers(radius = 20*(logit(point.locations.sf.transform$gini01)) ,
color = "#3182bd" ,
fillColor = "#9ecae1" ,
fillOpacity = .6 ,
weight = 2 ,
label = ~CMANAME)
# map via leaflet
leaflet(point.locations.sf.transform) %>%
addProviderTiles(provider = providers$CartoDB.Positron) %>%
addCircleMarkers(radius = 20*(logit(point.locations.sf.transform$gini01, min = 0 max = 1)) ,
# map via leaflet
leaflet(point.locations.sf.transform) %>%
addProviderTiles(provider = providers$CartoDB.Positron) %>%
addCircleMarkers(radius = 20*(logit(point.locations.sf.transform$gini01,
min = 0, max = 1)) ,
color = "#3182bd" ,
fillColor = "#9ecae1" ,
fillOpacity = .6 ,
weight = 2 ,
label = ~CMANAME)
#install.packages("geojsonio")
#install.packages("sf")
#install.packages("mapview")
#install.packages("tidyverse")
#install.packages("shiny")
install.packages("mlogit")
# map via leaflet
leaflet(point.locations.sf.transform) %>%
addProviderTiles(provider = providers$CartoDB.Positron) %>%
addCircleMarkers(radius = 20*(logit(point.locations.sf.transform$gini01,
min = 0, max = 1)) ,
color = "#3182bd" ,
fillColor = "#9ecae1" ,
fillOpacity = .6 ,
weight = 2 ,
label = ~CMANAME)
# map via leaflet
leaflet(point.locations.sf.transform) %>%
addProviderTiles(provider = providers$CartoDB.Positron) %>%
addCircleMarkers(radius = 20*(qlogis(point.locations.sf.transform$gini01)) ,
color = "#3182bd" ,
fillColor = "#9ecae1" ,
fillOpacity = .6 ,
weight = 2 ,
label = ~CMANAME)
# map via leaflet
leaflet(point.locations.sf.transform) %>%
addProviderTiles(provider = providers$CartoDB.Positron) %>%
addCircleMarkers(radius = 50*(qlogis(point.locations.sf.transform$gini01)) ,
color = "#3182bd" ,
fillColor = "#9ecae1" ,
fillOpacity = .6 ,
weight = 2 ,
label = ~CMANAME)
knitr::opts_chunk$set(echo = TRUE)
install.packages("RCurl")
library(dplyr)
library(RCurl)
install.packages("repmis")
install.packages("repmis")
library(repmis)
install.packages("repmis")
library(repmis)
irths_2003_2006 <- readRDS("https://github.com/rladies/meetup-presentations_montreal/blob/master/20191121_dplyr-workshop/data/births_2003_2006.rds?raw=true")
install.packages("repmis")
knitr::opts_chunk$set(echo = TRUE)
births_2003_2006 <- source_data("https://github.com/rladies/meetup-presentations_montreal/blob/master/20191121_dplyr-workshop/data/births_2003_2006.rds?raw=true")
library(repmis)
births_2003_2006 <- source_data("https://github.com/rladies/meetup-presentations_montreal/blob/master/20191121_dplyr-workshop/data/births_2003_2006.rds?raw=true")
births_2007_2018 <- source_data("https://github.com/rladies/meetup-presentations_montreal/blob/master/20191121_dplyr-workshop/data/births_2007_2018.rds?raw=true")
births_2007_2018 <- source_data("https://github.com/rladies/meetup-presentations_montreal/blob/master/20191121_dplyr-workshop/data/births_2007_2018.rds?raw=true")
library(dplyr)
library(repmis)
#load data
births_2003_2006 <- source_data("https://github.com/rladies/meetup-presentations_montreal/blob/master/20191121_dplyr-workshop/data/births_2003_2006.rds?raw=true")
births_2007_2018 <- source_data("https://github.com/rladies/meetup-presentations_montreal/blob/master/20191121_dplyr-workshop/data/births_2007_2018.rds?raw=true")
births_2007_2018 <- readRDS("https://github.com/rladies/meetup-presentations_montreal/blob/master/20191121_dplyr-workshop/data/births_2007_2018.rds?raw=true", fileEncoding="UTF-16LE")
births_2007_2018 <- readRDS("https://github.com/rladies/meetup-presentations_montreal/blob/master/20191121_dplyr-workshop/data/births_2007_2018.rds?raw=true")
births_2007_2018 <- source_data("https://github.com/rladies/meetup-presentations_montreal/blob/master/20191121_dplyr-workshop/data/births_2007_2018.rds?raw=true", stringsAsFactors = FALSE)
births_2007_2018 <- source_data("https://github.com/rladies/meetup-presentations_montreal/blob/master/20191121_dplyr-workshop/data/births_2007_2018.rds?raw=true", cache = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(repmis)
library(repmis)
births_2003_2006 <- source_data("https://github.com/rladies/meetup-presentations_montreal/blob/master/20191121_dplyr-workshop/data/births_2003_2006.rds?raw=true")
births_2007_2018 <- source_data("https://github.com/rladies/meetup-presentations_montreal/blob/master/20191121_dplyr-workshop/data/births_2007_2018.rds?raw=true")
#install.packages("dplyr")
#install.packages("repmis")
install.packages("httr")
library(httr)
births_2007_2018 <- readRDS("https://github.com/rladies/meetup-presentations_montreal/blob/master/20191121_dplyr-workshop/data/births_2007_2018.rds?raw=true")
births_2007_2018 <- readRDS("https://github.com/rladies/meetup-presentations_montreal/blob/master/20191121_dplyr-workshop/data/births_2007_2018.rds?raw=true")
births_2007_2018URL <- "https://github.com/rladies/meetup-presentations_montreal/blob/master/20191121_dplyr-workshop/data/births_2007_2018.rds?raw=true"
load(url(births_2007_2018URL))
births_2007_2018 <- readRDS("http://github.com/rladies/meetup-presentations_montreal/blob/master/20191121_dplyr-workshop/data/births_2007_2018.rds?raw=true")
births_2007_2018 <- readRDS("https://github.com/rladies/meetup-presentations_montreal/blob/master/20191121_dplyr-workshop/data/births_2007_2018.rds?raw=true")
births_2007_2018 <- source_data("https://github.com/rladies/meetup-presentations_montreal/blob/master/20191121_dplyr-workshop/data/births_2007_2018.rds?raw=true")
births_2007_2018 <- source_data("http://github.com/rladies/meetup-presentations_montreal/blob/master/20191121_dplyr-workshop/data/births_2007_2018.rds?raw=true")
births_2007_2018 <- readRDS("C:\Users\Megan Wylie\Documents\W-Personal\Rladies\2019-11-21_DPLYR\meetup-presentations_montreal-master\meetup-presentations_montreal-master\20191121_dplyr-workshop\data\births_2007_2018.rds")
births_2007_2018 <- readRDS("C:\\Users\\Megan Wylie\\Documents\\W-Personal\\Rladies\\2019-11-21_DPLYR\\meetup-presentations_montreal-master\\meetup-presentations_montreal-master\\20191121_dplyr-workshop\\data\\births_2007_2018.rds")
names(births_2007_2018)
names(births_2007_2018)
names(births_2003_2006)
names(births_2003_2006)
births_2003_2006 <- readRDS("C:\\Users\\Megan Wylie\\Documents\\W-Personal\\Rladies\\2019-11-21_DPLYR\\meetup-presentations_montreal-master\\meetup-presentations_montreal-master\\20191121_dplyr-workshop\\data\\births_2003_2006.rds")
names(births_2007_2018)
names(births_2003_2006)
births_2003_2018 <- bind_rows(births_2003_2006, births_2007_2018)
select(births_2003_2018, -c("Notes"))
births_2003_2018 <- select(births_2003_2018, -c("Notes"))
births_no_na <- filter(births_2003_2018, Average.LMP.Gestational.Age != NA)
births_by_state <- group_by(births_no_na, State)
births_by_state <- group_by(births_no_na, State) %>%
mutate(mean(births_no_na$Average.Birth.Weight))
view(births_by_state)
View(births_by_state)
births_no_na <- filter(births_2003_2018, Average.LMP.Gestational.Age is.na = FALSE)
births_no_na <- filter(births_2003_2018, Average.LMP.Gestational.Age is.na())
births_no_na <- filter(births_2003_2018, !is.na(Average.LMP.Gestational.Age))
births_by_state <- group_by(births_no_na, State) %>%
mutate(mean(births_no_na$Average.Birth.Weight))
View(births_by_state)
View(births_by_state)
names(births_no_na)
births_by_state <- group_by(births_no_na, State) %>%
summarise(mean_wt = mean(x = Average.Birth.Weight))
View(births_by_state)
births_by_state <- group_by(births_no_na, State) %>%
mutate(mean_wt = mean(x = Average.Birth.Weight))
births_by_state <- group_by(births_no_na, State) %>%
mutate(mean_wt = mean(Average.Birth.Weight))
births_state_only <- group_by(births_no_na, State) %>%
summarize(mean_wt = mean(Average.Birth.Weight))
View(births_state_only)
fer_rate_2010 <- filter(births_no_na, Year==2010)
View(fer_rate_2010)
rank_fer_rate <- group_by(fer_rate_2010, State) %>%
summarize(mean_wt = mean(Average.Birth.Weight))
View(rank_fer_rate)
